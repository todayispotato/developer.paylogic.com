<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Paylogic Developers</title><link href="http://developer.paylogic.com/" rel="alternate"></link><link href="http://developer.paylogic.com/feeds/all.atom.xml" rel="self"></link><id>http://developer.paylogic.com/</id><updated>2014-07-17T09:00:00+02:00</updated><entry><title>Paylogic Code review tool</title><link href="http://developer.paylogic.com/articles/codereview.html" rel="alternate"></link><updated>2014-07-17T09:00:00+02:00</updated><author><name>Anatoly Bubenkov</name></author><id>tag:developer.paylogic.com,2014-07-17:articles/codereview.html</id><summary type="html">
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As open sourcing software is a strategic decision of Paylogic we decided not to make an exception for our
development tools, in the hope that they are of use to the community. The code review tool is probably our most
important development tool, so we decided to start with that. The Github repository can be found
&lt;a class="reference external" href="https://github.com/paylogic/codereview"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Code_review"&gt;Code review&lt;/a&gt; is one of the main pillars of the Paylogic development
process. We have multiple projects ongoing, and none of the code changes can go into the stable repository
without at least 2 code reviews. The last code review is done by a special company role - &lt;tt class="docutils literal"&gt;Gatekeeper&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;We will reveal more about the gatekeeper process in later articles, but you can already see that code reviewing
is a very important process for us, so the tool we use for it is important as well.&lt;/p&gt;
&lt;p&gt;This article covers and explains the choice of the tool, its customizations, and the use case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-choice"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;The Choice&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In 2011 we had to choose a code review tool, and after a thorough research
&lt;a class="reference external" href="https://code.google.com/p/rietveld/"&gt;rietveld&lt;/a&gt; seemed one of the best solutions for our specific needs:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Web based.&lt;/li&gt;
&lt;li&gt;Minimalistic, code centric interface.&lt;/li&gt;
&lt;li&gt;Has keyboard shortcuts for easy code review navigation.&lt;/li&gt;
&lt;li&gt;Written in python, so it's easy to change and maintain.&lt;/li&gt;
&lt;li&gt;Has a community which improves it constantly.&lt;/li&gt;
&lt;li&gt;Simple installation on a private server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="customizations"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Customizations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So we decided to use rietveld. But we had to customize it significantly as our development process uses
&lt;a class="reference external" href="https://www.fogcreek.com/fogbugz/"&gt;Fogbugz&lt;/a&gt; as a case management tool. This means that every change to the
Paylogic codebase has a reference to a Fogbugz case, and the development itself is case-based.&lt;/p&gt;
&lt;p&gt;The whole picture of our continuous integration will be described in later article(s), however there was a
&lt;a class="reference external" href="http://www.slideshare.net/zittersteyn/advanced-continuous-integration-pygrunn-2014-dirk-zittersteyn"&gt;great talk&lt;/a&gt;
at our &lt;a class="reference external" href="http://pygrunn.org/"&gt;PyGrunn&lt;/a&gt; conference
on this topic from &lt;a class="reference external" href="http://nl.linkedin.com/in/dzittersteyn"&gt;Dirk Zittersteyn&lt;/a&gt;.  However, since it is important
to understand the role the code review tool plays in our ecosystem, the below image shows a part of the process.&lt;/p&gt;
&lt;img alt="gatekeepering and code review process" class="align-center" src="http://developer.paylogic.com/images/codereview/gatekeepering-and-code-review-process.png"/&gt;
&lt;p&gt;As you can see from the diagram (and the Legend), the code review tool is a critical part of our process.&lt;/p&gt;
&lt;p&gt;Before we continue, we'll give you a quick glossary for the rest of this article:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;original repository&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;target repository&lt;/tt&gt;)&lt;/dt&gt;
&lt;dd&gt;Version control repository which is considered as a target in which to merge some proposed set of changes.&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;original branch&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;target branch&lt;/tt&gt;)&lt;/dt&gt;
&lt;dd&gt;Version control branch in the &lt;tt class="docutils literal"&gt;original repository&lt;/tt&gt; in which to merge some proposed set of changes.&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;feature repository&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;source repository&lt;/tt&gt;)&lt;/dt&gt;
&lt;dd&gt;Version control repository which is considered as a source of the proposed set of changes. This can be the same as
&lt;tt class="docutils literal"&gt;original repository&lt;/tt&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;feature branch&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;source branch&lt;/tt&gt;)&lt;/dt&gt;
&lt;dd&gt;Version control branch in the &lt;tt class="docutils literal"&gt;source repository&lt;/tt&gt; which is considered as a source of the proposed
set of changes.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;With the customizations we've made to &lt;tt class="docutils literal"&gt;rietveld&lt;/tt&gt;, we can now:&lt;/p&gt;
&lt;div class="section" id="use-corporate-single-sign-on-to-authorize-users-in-the-code-review-tool"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;Use corporate single sign-on to authorize users in the code review tool&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It's important to remove unnecessary additional user management responsibilities from our Operational IT team. And of
course, from the user's perspective it's much less effort, as they can use a single corporate account to log in
(we use &lt;a class="reference external" href="http://www.google.com/enterprise/apps/business/"&gt;Google Apps for Business&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-code-review-issues-patchsets-taking-any-required-information-from-the-corresponding-fogbugz-case"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Create code review issues (patchsets), taking any required information from the corresponding Fogbugz case&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This feature is implemented by creating a special endpoint on the code review tool which gets the case number as
a parameter, and retrieves the following fields from that case through the
&lt;a class="reference external" href="http://help.fogcreek.com/8202/xml-api"&gt;Fogbugz API&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Original (target) branch (for example &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;default&lt;/tt&gt;) - implemented using a custom field in Fogbugz.&lt;/li&gt;
&lt;li&gt;Feature (source) branch (for example &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nice-feature&lt;/span&gt;&lt;/tt&gt;) - implemented using a custom field in Fogbugz.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For custom fields, we use the &lt;a class="reference external" href="http://www.fogcreek.com/fogbugz/plugins/plugin.aspx?ixPlugin=1"&gt;Custom Fields&lt;/a&gt; plugin.
From the Fogbugz side, it looks like this:&lt;/p&gt;
&lt;img alt="create patchset from Fogbugz" class="align-center" src="http://developer.paylogic.com/images/codereview/create-patchset.png"/&gt;
&lt;/div&gt;
&lt;div class="section" id="apply-custom-validations-for-any-patchsets-created"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Apply custom validations for any patchsets created&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We implement some critical checks, where we for example don't allow the changing of certain non-editable files.
If any of the validations didn't pass, creation of the issue (i.e. an additional patchset) fails and shows an error
to the user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implement-gatekeepering-process-support"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Implement Gatekeepering process support&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Users with a special role can now &lt;tt class="docutils literal"&gt;approve&lt;/tt&gt; a certain revision of the feature branch.&lt;/p&gt;
&lt;p&gt;This is, again, implemented using a special custom field in Fogbugz called
&lt;tt class="docutils literal"&gt;approved revision&lt;/tt&gt;, together with the Fogbugz API to set it from the code review tool.&lt;/p&gt;
&lt;p&gt;In the code review tool:&lt;/p&gt;
&lt;img alt="approve revision from codereview by the gatekeeper, target branch autocompletion" class="align-center" src="http://developer.paylogic.com/images/codereview/approve-revision-click.png"/&gt;
&lt;p&gt;And in Fogbugz:&lt;/p&gt;
&lt;img alt="approved revision and ci project fields set in the Fogbugz" class="align-center" src="http://developer.paylogic.com/images/codereview/approved-revision-field.png"/&gt;
&lt;/div&gt;
&lt;div class="section" id="allow-gatekeepers-to-set-and-select-from-the-dropdown-the-target-branch-for-a-given-ci-project"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Allow gatekeepers to set (and select from the dropdown) the target branch for a given CI project&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Both &lt;tt class="docutils literal"&gt;target branch&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;CI project&lt;/tt&gt; are custom fields of a Fogbugz case.&lt;/p&gt;
&lt;p&gt;In the code review tool:&lt;/p&gt;
&lt;img alt="approve revision from codereview by the gatekeeper, target branch autocompletion" class="align-center" src="http://developer.paylogic.com/images/codereview/approve-revision-target-branch.png"/&gt;
&lt;p&gt;And in Fogbugz:&lt;/p&gt;
&lt;img alt="target branch field in the Fogbugz" class="align-center" src="http://developer.paylogic.com/images/codereview/target-branch-field.png"/&gt;
&lt;/div&gt;
&lt;div class="section" id="support-creation-of-an-issue-patchset-using-bzr-git-and-mercurial-repositories"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Support creation of an issue (patchset), using bzr, git and mercurial repositories&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All combinations are accepted for &lt;tt class="docutils literal"&gt;original&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;feature&lt;/tt&gt; branch fields in Fogbugz.
As additional protection from &lt;tt class="docutils literal"&gt;phishing&lt;/tt&gt; on the &lt;tt class="docutils literal"&gt;original&lt;/tt&gt; branch, the latest revision from
the &lt;tt class="docutils literal"&gt;source repository&lt;/tt&gt;'s &lt;tt class="docutils literal"&gt;original branch&lt;/tt&gt; will be used to calculate a diff between
the &lt;tt class="docutils literal"&gt;source repository&lt;/tt&gt;'s &lt;tt class="docutils literal"&gt;feature branch&lt;/tt&gt; and the &lt;tt class="docutils literal"&gt;original repository&lt;/tt&gt;'s &lt;tt class="docutils literal"&gt;original branch&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="problems-using-rietveld"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Problems using rietveld&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;rietveld was developed specially for &lt;a class="reference external" href="https://developers.google.com/appengine/?csw=1"&gt;Google App Engine&lt;/a&gt;.
It has lots of benefits for developers who don't want to bother with any OpIT related tasks.
As we however have a strict requirement to host the code (and thus the code review tool) on our private servers, we used
&lt;a class="reference external" href="http://django-gae2django.googlecode.com/svn/trunk/examples/rietveld/README"&gt;gae2django&lt;/a&gt; to deploy rietveld locally.
What gae2django does is convert models that are supposed to be used with the
Google App Engine datastore to Django ORM models. This allows us to deploy the
application using relational databases such as (in our case) MySQL.&lt;/p&gt;
&lt;p&gt;This was &lt;tt class="docutils literal"&gt;good enough&lt;/tt&gt; for us, as up till now rietveld was using GAE DB (ext.db). But this is no longer the case.
Now rietveld uses &lt;a class="reference external" href="https://developers.google.com/appengine/docs/python/ndb/"&gt;NDB&lt;/a&gt; for its models. And it's simply
&lt;tt class="docutils literal"&gt;not possible&lt;/tt&gt; to implement automatic mapping from NDB-based models to django ORM models
because the difference is huge.&lt;/p&gt;
&lt;p&gt;So currently, we are in the situation that we cannot receive any updates from the rietveld repository any more,
so instead we have to support our &lt;tt class="docutils literal"&gt;fork&lt;/tt&gt; ourselves. For now this is &lt;tt class="docutils literal"&gt;acceptable&lt;/tt&gt;,
but we are considering moving to a different code review tool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-use-it-or-to-try-it"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Want to use it or to try it?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/paylogic/codereview/blob/master/README.rst"&gt;readme&lt;/a&gt; on Github contains all the information
required to set up the code review tool on your server. Don't hesitate to try it out.
If you have any problems with installation, please create an &lt;a class="reference external" href="https://github.com/paylogic/codereview/issues/"&gt;issue&lt;/a&gt;
on Github.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="future-considerations"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Future considerations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As was mentioned earlier, &lt;tt class="docutils literal"&gt;Review Board&lt;/tt&gt; will probably be the replacement for
our current solution. However, if we'll switch to git completely (which we haven't done yet) there are
some other alternatives to consider as well, such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.gitlab.com/"&gt;GitLab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://code.google.com/p/gerrit/"&gt;Gerrit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any new tool we might choose will have to be customized in order to be an integral part of our development process.
This new customization will be open sourced as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thanks-questions"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;"Thanks! Questions?"&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So regarding the code review, we've put all our cards on the table: from decision making to implementation,
support, and use cases. We hope that it will be useful for the community.
Feedback is, as usual, more than appreciated. Happy code reviewing, we wish you 0 comments on your reviews!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="code review"></category><category term="gatekeeper"></category><category term="fogbugz"></category><category term="review"></category><category term="rietveld"></category><category term="open source"></category></entry><entry><title>pytest-xdist and session-scoped fixtures</title><link href="http://developer.paylogic.com/articles/pytest-xdist-and-session-scoped-fixtures.html" rel="alternate"></link><updated>2014-05-28T12:36:00+02:00</updated><author><name>Anatoly Bubenkov</name></author><id>tag:developer.paylogic.com,2014-05-28:articles/pytest-xdist-and-session-scoped-fixtures.html</id><summary type="html">
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the earlier &lt;a class="reference external" href="test-p14n"&gt;article on Test parallelization&lt;/a&gt; we unveiled how we &lt;tt class="docutils literal"&gt;parallelize&lt;/tt&gt; our tests.
There we gave a few examples of services we run for the tests. However, due to implementation details of
&lt;a class="reference external" href="https://pytest.org"&gt;pytest&lt;/a&gt; and &lt;a class="reference external" href="https://pytest.org/latest/xdist.html"&gt;pytest-xdist&lt;/a&gt;, it is not possible
to implement service starting and stopping efficiently out of the box. That's why we developed our own solution,
described in this article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="back-to-the-example-where-the-problem-starts"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Back to the example, where the problem starts&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;execnet&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;app_worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;database_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Start web application.&lt;/span&gt;

&lt;span class="sd"&gt;    :param channel: execnet channel to talk to the master process.&lt;/span&gt;
&lt;span class="sd"&gt;    :param str database_connection: the database connection string.&lt;/span&gt;
&lt;span class="sd"&gt;    :param port: the port number that will be used by runserver.&lt;/span&gt;

&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="c"&gt;# monkey patch the database connection&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;
    &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;database_connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;database_connection&lt;/span&gt;

    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tornado.httpserver&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tornado.ioloop&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tornado.web&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tornado.wsgi&lt;/span&gt;

    &lt;span class="n"&gt;wsgi_app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WSGIContainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;app_wsgi_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tornado_app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r"/media/(.*)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StaticFileHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;media_path&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FallbackHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wsgi_app&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;httpserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tornado_app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'started app on port: {0}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ioloop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IOLoop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'session'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;database_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Start application in a separate process.&lt;/span&gt;

&lt;span class="sd"&gt;    :param port: a random port the application should listen to.&lt;/span&gt;

&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="c"&gt;# create execnet gateway&lt;/span&gt;
    &lt;span class="n"&gt;gw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;execnet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makegateway&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;# set the same python system path on remote python as on current one&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
    &lt;span class="n"&gt;gw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote_exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s"&gt;"import sys"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"sys.path = {0}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitclose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;# create channel running worker function&lt;/span&gt;
    &lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote_exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;app_worker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;database_connection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;database_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addfinalizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gw&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What is extremely important here is that we instantiate things like applications and services
only once per test run, because it takes a lot of time to start / stop applications and/or services,
to create databases, etc.&lt;/p&gt;
&lt;p&gt;According to &lt;a class="reference external" href="https://pytest.org/latest/fixture.html"&gt;pytest fixtures&lt;/a&gt;, our application will be instantiated
on demand and should live during the whole test session time. Which is fine, as long as you do
not &lt;tt class="docutils literal"&gt;parallelize&lt;/tt&gt; tests, and therefore do not use &lt;a class="reference external" href="https://pytest.org/latest/xdist.html"&gt;pytest-xdist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But when you do use it, it's &lt;strong&gt;not guaranteed&lt;/strong&gt; that test nodes will have only one test session!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pytest-xdist-internals"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;pytest-xdist internals&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To simplify things, let's concentrate on the &lt;tt class="docutils literal"&gt;stages&lt;/tt&gt; that &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pytest-xdist&lt;/span&gt;&lt;/tt&gt; uses to run tests in a distributed way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Collect all nodes checking the connection&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Rsync files needed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Collect all tests on every node&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Start 'initial distribution' test sessions over nodes using the number of tests calculated by the following formula:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="formula"&gt;
&lt;i&gt;ntests&lt;/i&gt; = &lt;i&gt;Ntests&lt;/i&gt; ⁄ (&lt;i&gt;Knodes&lt;/i&gt;*4)
&lt;/div&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;where:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;ntests - number of tests to run for test node session&lt;/li&gt;
&lt;li&gt;Ntests - total number of tests&lt;/li&gt;
&lt;li&gt;Knodes - number of test nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Start more test sessions for nodes which are done with initial test sessions using the same formula&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We see here that the more tests you have for the same amount of nodes, the more test sessions will be started!&lt;/p&gt;
&lt;p&gt;In the below diagram we can see how it works in a more visual way:&lt;/p&gt;
&lt;img alt="" class="align-center" src="http://developer.paylogic.com/images/pytest-xdist-in-action.png" style="width: 75%;"/&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-avoid-multiple-sessions-on-single-node"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;How to avoid multiple sessions on single node&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So we know that it's possible to get not one but several sessions during the test run on a single node.
How can we avoid that? Fortunately, even though we have multiple sessions per node, it's still the same python process,
so we can cache objects on module level. In this way we &lt;em&gt;invent&lt;/em&gt; a new fixture scope - &lt;tt class="docutils literal"&gt;test run&lt;/tt&gt;.
For fixtures within this scope, the fixture and its finalizer will be called only once per whole test run on a given test node.
Here is the implementation of the utility decorator that we use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;decorator&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="n"&gt;marker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_memoize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Memoization helper to cache function's return value as an attribute of this function."""&lt;/span&gt;
    &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'_cache'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_cache&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;memoize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Decorator which caches the return value of the function."""&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_memoize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see it's a pretty straightforward application of the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Memoization"&gt;memoization
technique&lt;/a&gt; using function object as
a cache storage based on the &lt;a class="reference external" href="https://pypi.python.org/pypi/decorator/3.4.0"&gt;decorator&lt;/a&gt; package.
The &lt;tt class="docutils literal"&gt;decorator&lt;/tt&gt; package is needed to preserve the function
prototype which is important for the &lt;tt class="docutils literal"&gt;pytest fixture dependency injection mechanism&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;So now our application fixture looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;atexit&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;execnet&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'session'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@memoize&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;database_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Start application in a separate process.&lt;/span&gt;

&lt;span class="sd"&gt;    :param port: a random port the application should listen to.&lt;/span&gt;

&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="c"&gt;# create execnet gateway&lt;/span&gt;
    &lt;span class="n"&gt;gw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;execnet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makegateway&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;# set the same python system path on remote python as on current one&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
    &lt;span class="n"&gt;gw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote_exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s"&gt;"import sys"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"sys.path = {0}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitclose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;# create channel running worker function&lt;/span&gt;
    &lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote_exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;app_worker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;database_connection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;database_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;atexit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gw&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By using the &lt;tt class="docutils literal"&gt;memoize&lt;/tt&gt; decorator we avoid calling the &lt;tt class="docutils literal"&gt;application&lt;/tt&gt; function multiple times during the test run, even if
there will be multiple sessions involved on a single test node.
The result of the first call of the &lt;tt class="docutils literal"&gt;application&lt;/tt&gt; function will be cached as an attribute on the application function.
Subsequent calls will just return the cached value.
Note that instead of &lt;tt class="docutils literal"&gt;request.addfinalizer&lt;/tt&gt; we use &lt;tt class="docutils literal"&gt;atexit.register&lt;/tt&gt;. This is because memoization has it's downside - we cannot use
pytest's normal fixture finalizers simply because there's no scope higher than &lt;tt class="docutils literal"&gt;session&lt;/tt&gt; at the moment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We identified a few advantages of using the approach discussed in the previous sections.
This approach allowed us to considerably reduce our test execution time.
It also improved the test stability, because the OS performs better as it doesn't need to spawn and kill lots
of processes. We hope that you will find our approach useful, especially if you use &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pytest-xdist&lt;/span&gt;&lt;/tt&gt;,
as you will probably run into the same issues as we did.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="testing"></category><category term="pytest"></category><category term="pytest-xdist"></category><category term="fixtures"></category><category term="session"></category></entry><entry><title>Settei</title><link href="http://developer.paylogic.com/articles/settei.html" rel="alternate"></link><updated>2014-04-29T12:03:00+02:00</updated><author><name>Spyros Ioakeimidis</name></author><id>tag:developer.paylogic.com,2014-04-29:articles/settei.html</id><summary type="html">
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;settei&lt;/code&gt; is a general purpose python settings library which uses
&lt;a class="reference external" href="http://pythonhosted.org/setuptools/pkg_resources.html#entry-points"&gt;entry points&lt;/a&gt;
as a registry, inspired by &lt;a class="reference external" href="http://pythonhosted.org/setuptools/setuptools.html"&gt;setuptools&lt;/a&gt;.
It is a library which provides the possibility to define
and use configuration settings from entry points for specific applications and
environments. &lt;code&gt;settei&lt;/code&gt; introduces the following terms:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;environment&lt;/strong&gt;: the name of an entry point&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;group&lt;/strong&gt;: a group of defined environments&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;application&lt;/strong&gt;: part of a group's name and refers to the application to which
settings apply&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A minimal app that illustrates the use of &lt;cite&gt;settei&lt;/cite&gt; can be found
&lt;a class="reference external" href="https://github.com/paylogic/settei-example"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="motivation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Motivation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At Paylogic we are extensively using &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;
web framework for most parts of our system. Django uses the concept of
&lt;a class="reference external" href="https://docs.djangoproject.com/en/1.6/topics/settings/"&gt;setting files&lt;/a&gt;, in
which we can define application-specific settings, such as &lt;tt class="docutils literal"&gt;DEBUG&lt;/tt&gt;. In the
rest of the application we can access these settings using for example
&lt;code&gt;django.conf.settings.DEBUG&lt;/code&gt;. However, for other parts of our system we
are using &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;, which follows a similar, but
slightly different way to define &lt;a class="reference external" href="http://flask.pocoo.org/docs/config/"&gt;configuration settings&lt;/a&gt;. In a Flask application a setting can
be accessed by for example &lt;code&gt;app.config['DEBUG']&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Soon we were confronted with the limitation to share configuration settings
between Flask and Django applications. Additionally, we wanted to keep these
configurations consistent. However, we found out that there was no
framework-agnostic Python library for specifying configuration settings.&lt;/p&gt;
&lt;p&gt;Moreover, as we have a clear separation between environments (e.g. dev, staging,
live etc.), some configuration settings are either set in one environment and
not in the others, or the same configuration settings have different values
depending on the environment. The code however should not know anything about
the environment in which it is executed. In this way the code does not need to
be modified, even when multiple environments are used.&lt;/p&gt;
&lt;p&gt;For this reason, we initially decided to create separate files to store
configuration settings, which could also change depending on the environment.
However, we ended up with many of these files, which at some point became
cumbersome to maintain.  Furthermore, some developers started importing settings
from these files and others used the standard way of Django. The result of this
is inconsistencies and conflicts, as the same setting can be imported from
different places.&lt;/p&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Requirements&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Based on this motivation, we came up with a number of requirements for a settings
configuration system.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introducing a new environment should be easy and without too much hassle.&lt;/li&gt;
&lt;li&gt;We should have the possibility to inherit/extend settings from other
environments.  This would allow us to build a modular and extensible structure
of configuration settings.&lt;/li&gt;
&lt;li&gt;There should be no specific template structure involved for generating
settings, because it gets really hard and cumbersome to read templates with
tons of expressions.&lt;/li&gt;
&lt;li&gt;It should be possible to store settings separately from applications and
scripts. The advantage of this is that we can create secret settings (usually
for the production environment) in a way that also makes them safe and that
does not depend on a specific application.&lt;/li&gt;
&lt;li&gt;A configuration settings system should be framework-agnostic so that it can be used
when multiple frameworks are involved.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="design"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Design&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The most important design decision of &lt;code&gt;settei&lt;/code&gt; is to base its implementation
on the concept of &lt;a class="reference external" href="http://pythonhosted.org/setuptools/pkg_resources.html#entry-points"&gt;entry points&lt;/a&gt;
in order to create a framework-agnostic library for configuration settings.&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Entry points&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Entry points provide an intuitive way for distributions to expose Python objects,
such as functions or classes, so that they can be used by other distributions.
Applications can then search for specific entry points. &lt;code&gt;settei&lt;/code&gt; uses the
concept of entry points to define groups of environments.&lt;/p&gt;
&lt;p&gt;So, what does using entry points mean? It means that we will have the possibility
to store settings in a distribution. Then, if we want to get access to settings of
e.g. a default or a local environment, we will need to have access to install this
distribution and include this distribution in the &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; of the script
or application.&lt;/p&gt;
&lt;div class="section" id="groups-and-environments"&gt;
&lt;h4&gt;Groups and environments&lt;/h4&gt;
&lt;p&gt;A group is a container of environments. An example of a group with two environments
could be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
    &lt;span class="n"&gt;entry_points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'settings_application_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s"&gt;'default = path.to.package.of.application_name.default_settings:generate_config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'local = path.to.package.of.application_name.local_settings:generate_config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="c"&gt;# ...&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The name of the group consists of two parts. The first is a standard prefix
part, &lt;code&gt;settings_&lt;/code&gt;, and the second is the name of the application. For
example, &lt;code&gt;settings_application_name&lt;/code&gt;, where &lt;code&gt;application_name&lt;/code&gt; is
the name of the application. The prefix part in the group name is mandatory as
it helps &lt;code&gt;settei&lt;/code&gt; to identify only entry points useful for it and iterate
through them.&lt;/p&gt;
&lt;p&gt;Each environment name inside a group must be &lt;tt class="docutils literal"&gt;unique&lt;/tt&gt;. In our example, in the
group &lt;code&gt;settings_application_name&lt;/code&gt; there should only be one environment named
&lt;code&gt;default&lt;/code&gt; and only one named &lt;code&gt;local&lt;/code&gt;. However, we can specify same
environment names that belong to different groups. If we specify environments
with the same name inside one group, then a &lt;code&gt;DuplicateEntryPoint&lt;/code&gt; exception
will be raised. This exception is used to avoid cases of scripts borrowing
settings from each other. For example, lets assume that in the previous example
we specified the &lt;tt class="docutils literal"&gt;default&lt;/tt&gt; environemnt twice. It would not be clear from which
file (default_settings.py or local_settings.py) we would read settings.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="example-usage"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Example Usage&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;settei&lt;/code&gt; package can be configured and used in a series of simple steps.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Define groups and environments in the &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; of the package.&lt;/li&gt;
&lt;li&gt;For each environment (e.g. default_settings), define the function to be used
as an entry point.&lt;/li&gt;
&lt;li&gt;Implement this function in the environment files (e.g. default_settings.py).
They should create and return a new instance of &lt;code&gt;Config&lt;/code&gt; with
configuration settings for this environment.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;get_config&lt;/code&gt; function in the rest of the package to read
configuration settings for specific applications and environments.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The best way to explain how &lt;code&gt;settei&lt;/code&gt; can be used is through examples.
The rest of this section goes into more detail for each of the above steps.&lt;/p&gt;
&lt;div class="section" id="define-groups-and-environments"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Define groups and environments&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As a first step, we need to define environments and put them into groups. We are
free to choose the name of the function to be used as an entry point. In this case,
we chose the name &lt;code&gt;generate_config&lt;/code&gt;. Let's assume that our package contains
two applications.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# package/setup.py&lt;/span&gt;
&lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
    &lt;span class="n"&gt;entry_points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'settings_application1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s"&gt;'default = path.to.application1.default_settings:generate_config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'local = path.to.application1.local_settings:generate_config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;'settings_application2'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s"&gt;'default = path.to.application2.default_settings:generate_config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'local = path.to.application2.local_settings:generate_config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-settings"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;Create settings&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To create settings, we need an instance of the &lt;code&gt;Config&lt;/code&gt; class.
In the following example, we are using the function named &lt;code&gt;generate_config&lt;/code&gt;,
which we specified as an entry point when we defined the groups and environments.
The &lt;code&gt;generate_config&lt;/code&gt; function, in our case, returns an instance of the
&lt;code&gt;Config&lt;/code&gt; class. Settings can then be created either directly in the code,
be loaded from a python file, or come from an object. If there is any error
during configuration or a &lt;code&gt;Config&lt;/code&gt; instance is not returned, then a
&lt;code&gt;WrongConfigTypeError&lt;/code&gt; exception is raised.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# package/application1/default_settings.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;settei.config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_config&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;# create settings directly&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'QUESTION'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'The Ultimate Question of Life, the Universe, and Everything'&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ANSWER'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;

    &lt;span class="c"&gt;# or load them from a file&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_pyfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'full/path/to/file.py'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# or from an object&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'path.to.object'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="read-settings"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Read settings&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In order to use the settings of our package, we need to first install it using
&lt;code&gt;python setup.py install&lt;/code&gt; and make sure that it is in our path. We can then
read and use settings in the rest of our package
by using the &lt;code&gt;get_config&lt;/code&gt; function. Note that in the &lt;code&gt;get_config&lt;/code&gt;
function we specify the application name and not the group name. For example,
if we want to load settings for the application &lt;code&gt;application1&lt;/code&gt; and we have
defined a group of environments with the name &lt;code&gt;settings_application1&lt;/code&gt;,
then in the &lt;code&gt;get_config&lt;/code&gt; function we just use the name of the application,
which in this case is &lt;code&gt;application1&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;settei&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;

&lt;span class="c"&gt;# get config settings for 'applicaion1' application and 'local' environment&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'application1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'local'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# get config settings for 'application2' application and 'local' environment&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'application2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'local'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# now you can use it as you want&lt;/span&gt;
&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'DEBUG'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the environment from which we want to read settings does not exist, then an
&lt;code&gt;EnvironmentNotSpecified&lt;/code&gt; exception is raised.&lt;/p&gt;
&lt;p&gt;Another way to define the desired environment is using the
&lt;code&gt;CONFIG_ENVIRONMENT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# run in this way&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="n"&gt;CONFIG_ENVIRONMENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'dev'&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;my_incredible_script&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, in &lt;tt class="docutils literal"&gt;my_incredible_script.py&lt;/tt&gt; when the &lt;code&gt;get_config&lt;/code&gt; function is
used, we do not need to specify an environment as it will use the &lt;code&gt;dev&lt;/code&gt;
environment that is defined by &lt;code&gt;CONFIG_ENVIRONMENT&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# and in my_incredible_script.py we can use get_config&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;settei&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;

&lt;span class="c"&gt;# get config settings for 'application1' application and 'dev' environment,&lt;/span&gt;
&lt;span class="c"&gt;# which has been specified when running my_incredible_script.py&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'application1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="settings-inheritance"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Settings inheritance&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Settings can also inherit other settings. However, this is only possible
for settings that belong to the same group of environments. For instance, if
you want your &lt;code&gt;local&lt;/code&gt; settings to inherit the &lt;code&gt;default&lt;/code&gt; settings,
then in the &lt;code&gt;generate_config&lt;/code&gt; function you should mention the name of
environment from which you want to inherit.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# in your application1/local_settings.py file&lt;/span&gt;
&lt;span class="c"&gt;# 'default' is the environment from which we want to inherit settings&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c"&gt;# change a setting, the right answer is 42&lt;/span&gt;
    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ANSWER'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we read the &lt;code&gt;local&lt;/code&gt; settings, then we will see that
&lt;code&gt;config['ANSWER']&lt;/code&gt; setting returns the value defined in
&lt;code&gt;local_settings.py&lt;/code&gt;, as we would expect.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;settei&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'application1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'local'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'QUESTION'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Ultimate&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Life&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Universe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Everything&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ANSWER'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inheriting other settings does not stop us from introducing additional ones.
Attention should be paid though as new settings could be overwritten by any
inherited ones with the same name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# in your package/application1/local_settings.py file&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;settei.config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;# change a setting, the right answer is 42&lt;/span&gt;
    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ANSWER'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;

    &lt;span class="c"&gt;# introduce an additional setting&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'NEW'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'A new setting'&lt;/span&gt;

    &lt;span class="c"&gt;# this will be overwritten with the 'ANSWER' from the 'default' environment&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ANSWER'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;

    &lt;span class="c"&gt;# update the 'local' settings with the 'default' settings&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# local['ANSWER'] will be 42 here again&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the provided environment in &lt;code&gt;generate_config&lt;/code&gt; is missing or not
specified, then an &lt;code&gt;EnvironmentIsMissing&lt;/code&gt; or &lt;code&gt;EnvironmentNotSpecified&lt;/code&gt;
exception will be raised respectively. If we try to specify more than one
environment to inherit settings from, then a &lt;code&gt;MoreThanOneDependencyInjection&lt;/code&gt;
exception will be raised.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;settei&lt;/code&gt; is a package, which bases its implementation on the concept of
entry points from setuptools, to provide a maintainable way of creating configuration
settings. &lt;code&gt;settei&lt;/code&gt; makes it very easy and intuitive to introduce a new environment,
e.g. a live environment, where settings usually differ a lot from those used
during development. Finally, settings inheritance, which is accomplished by using
dependency injection, provides the modularity and extensibility we needed.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="open source"></category><category term="python"></category><category term="settings"></category><category term="entry points"></category><category term="setuptools"></category></entry><entry><title>Test parallelization</title><link href="http://developer.paylogic.com/articles/test-p14n.html" rel="alternate"></link><updated>2014-01-31T10:37:00+01:00</updated><author><name>Anatoly Bubenkov</name></author><id>tag:developer.paylogic.com,2014-01-31:articles/test-p14n.html</id><summary type="html">
&lt;div class="uk-panel uk-panel-box note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This article was originally started by &lt;a class="reference external" href="http://www.linkedin.com/in/dmitrijsmilajevs"&gt;Dmitrijs Milajevs&lt;/a&gt;
when he was working for Paylogic. We made some fixes and amendments to actualize it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Automated tests are awesome. A good test suite makes refactoring easier and allows
developers to catch bugs before the code is deployed on live or is spotted
by a tester.&lt;/p&gt;
&lt;p&gt;Once the advantages of automated testing are discovered, the number of tests increases
exponentially. At Paylogic, there were about 200 tests in the early testing stage.
The tests took about 5 minutes to run. At the moment, we have about 2500 tests and using
a single test process it takes 1 hour and 40 minutes to execute.&lt;/p&gt;
&lt;p&gt;For developers, it's simply not an option to wait for 2 hours until the whole test suite finishes,
as they want results as soon as possible. They might then take the risk
to push the code untested. However, as we have continuous integration in place, if there are any failing
tests, the developers will get their work back to fix them anyway. This is something that
costs extra time.&lt;/p&gt;
&lt;p&gt;It became clear that something had to be changed. We could completely rewrite the tests, make
them very focused and try mock most of the things (such as the database). However,
this means that the team would have to exclusively dedicate a few months to improve the tests and
stop developing new features.&lt;/p&gt;
&lt;p&gt;Another solution would involve test distribution over several executors that
might run on one or several machines. The same tests run in parallel on
many nodes reduces &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Wall-clock_time"&gt;wall time&lt;/a&gt;.
Everybody is happy: developers do not need to wait hours to get their test
results and get an excuse to go for a coffee.  Product managers do not need to
change the long term planning. Customers are happy.  Profit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-closer-look-to-the-test-suite"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;A closer look to the test suite&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The testing tool we use is &lt;a class="reference external" href="http://pytest.org/"&gt;py.test&lt;/a&gt;. We keep our tests in
a separate folder called tests, which is organized like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
tests
├── conftest.py
├── deployment
├── fixtures
├── functional
├── __init__.py
└── unit
&lt;/pre&gt;
&lt;p&gt;In &lt;tt class="docutils literal"&gt;conftest.py&lt;/tt&gt; we store the &lt;tt class="docutils literal"&gt;py.test&lt;/tt&gt; configuration and import fixtures which are
defined in the &lt;cite&gt;fixtures&lt;/cite&gt; folder. The folder &lt;cite&gt;functional&lt;/cite&gt; contains functional tests, &lt;cite&gt;unit&lt;/cite&gt;
contains unit tests and so on.&lt;/p&gt;
&lt;p&gt;The tests require the database to be available, as well as memcache. Functional tests
also expect the &lt;tt class="docutils literal"&gt;web servers&lt;/tt&gt; required for the tests to listen on specific ports. By &lt;tt class="docutils literal"&gt;web servers&lt;/tt&gt; I
mean those servers that serve applications whose code we cover with our tests. Among them can be
the &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; development server, the
&lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; development server, &lt;a class="reference external" href="http://pythonpaste.org/modules/httpserver.html"&gt;paste&lt;/a&gt;
http server and so on.&lt;/p&gt;
&lt;p&gt;A typical development session looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv env  &lt;span class="c"&gt;# Create a virtualenv.&lt;/span&gt;
&lt;span class="nb"&gt;source &lt;/span&gt;env/bin/activate  &lt;span class="c"&gt;# Activate it.&lt;/span&gt;
pip install -r requirements-testing.txt  &lt;span class="c"&gt;# Install all the needed packages.&lt;/span&gt;
&amp;lt;generate settings &lt;span class="nb"&gt;command&lt;/span&gt;&amp;gt;  &lt;span class="c"&gt;# Generate settings (set up the database connection string etc).&lt;/span&gt;
&amp;lt;database schema generation &lt;span class="nb"&gt;command&lt;/span&gt;&amp;gt; &lt;span class="c"&gt;# Generate the database schema and insert initial data into it.&lt;/span&gt;

&lt;span class="c"&gt;# Implement changes for given feature.&lt;/span&gt;

&lt;span class="c"&gt;# Start web application(s)&lt;/span&gt;

py.test tests  &lt;span class="c"&gt;# Run the tests.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dependency satisfaction, configuration, database instantiation and population
together with the startup of the required web application(s) is done outside of the test run.
This makes sense, because none of them has to be done before every test run.
Clearly, a developer has to install a package when a new dependency is
introduced and regenerate settings if a new configuration parameter is added.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="test-parallelization-in-theory-and-practice"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Test parallelization in theory and practice&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If we run tests in parallel, for example in two sessions, each session will share the same
settings (most importantly the database connection string) and the same web
applications. This has several limitations. If we have two tests that access
the same application simultaneously, their requests will be processed by only one
application worker, which of course leads to a performance decrease.&lt;/p&gt;
&lt;p&gt;Another more serious limitation comes from the way our tests are written. There
are for example tests for ticket generation that check PDF generation. On a high level the tests
look like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create an order.&lt;/li&gt;
&lt;li&gt;Execute the ticket generation function.&lt;/li&gt;
&lt;li&gt;Check that 1 ticket was generated.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The trick is in the second step. The ticket generation function is triggered by
a periodical job. It selects from the database all the orders for which tickets have
to be generated and generates them. In a sequential test run this is not a big
deal because there will never be a situation that one call to the ticket
generation function generates more than one ticket. The performed actions are:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="16%"&gt;&lt;/col&gt;
&lt;col width="84%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;strong&gt;Time&lt;/strong&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;strong&gt;Action&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td colspan="2"&gt;Test 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Create an order.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Execute the ticket generation function.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Check that 1 ticket was generated.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td colspan="2"&gt;Test 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Create another order.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Execute the ticket generation function.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;Check that 1 ticket was generated.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In a parallel run however, two orders may be generated simultaneously. Then, the
generation function will get both orders, and consequently generate tickets for both.
Imagine situations like this:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="5%"&gt;&lt;/col&gt;
&lt;col width="47%"&gt;&lt;/col&gt;
&lt;col width="47%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;strong&gt;Time&lt;/strong&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;strong&gt;Action&lt;/strong&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;strong&gt;Action&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td colspan="2"&gt;Test 1&lt;/td&gt;
&lt;td&gt;Test 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Create an order.&lt;/td&gt;
&lt;td rowspan="2"&gt;Create another order.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Execute the ticket generation function. (Generates 2 tickets.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Check that 1 ticket was generated. (Fails! 2 tickets were generated.)&lt;/td&gt;
&lt;td&gt;Execute the ticket generation. (Does nothing!)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt;Check that 1 ticket was generated. (Fails! 0 tickets were generated.)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Because tests are not always meant to be run in parallel when they are written,
situations like this can happen quite often.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-art-of-mocking"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;The art of mocking&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The simplest way to avoid situations where tests influence each other is to get
rid of the shared resources. In our case, this means that each test session would have its own
unique database connection string, which leads to a non-shared database.&lt;/p&gt;
&lt;p&gt;The problem is that we, using a common-use approach, store settings in python modules and instantiate them from
templates before the test run! An example of configuration using python modules can be found in
&lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/topics/settings"&gt;Django settings&lt;/a&gt;,
&lt;a class="reference external" href="http://flask.pocoo.org/docs/api/#flask.Config.from_object"&gt;Flask configuration&lt;/a&gt;, etc.&lt;/p&gt;
&lt;p&gt;We could checkout the sources of Paylogic to two folders and change the settings
to the ones we want. This would entail some crazy text file editing scripts to
alter settings. In addition, it is not the way &lt;a class="reference external" href="https://pypi.python.org/pypi/pytest-xdist"&gt;pytest-xdist&lt;/a&gt; works.&lt;/p&gt;
&lt;p&gt;Another way is to mock the connection string using a fixture:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'session'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;database_settings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;database_connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Mock the database settings.&lt;/span&gt;

&lt;span class="sd"&gt;    :param str database_connection: the database connection string.&lt;/span&gt;

&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="c"&gt;# Reset the connection string.&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;database_connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;database_connection&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make the mock successful, our code should behave accordingly. Instead of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config.database&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;database_connection&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connect_to_db&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""Connect to the database,&lt;/span&gt;

&lt;span class="sd"&gt;    A completely made up function to illustrate *incorrect* settings import.&lt;/span&gt;

&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;database_connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;we write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connect_to_db&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""Connect to the database,&lt;/span&gt;

&lt;span class="sd"&gt;    A completely made up function to illustrate a *better* settings import.&lt;/span&gt;

&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;database_connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="web-applications"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Web applications&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For the unit tests, mocking the database connection is sufficient. If we want to
start two instances of a web application, we need to change:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The database connection string.&lt;/li&gt;
&lt;li&gt;The port the application is listening on.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;An application could be a fixture that starts a subprocess and passes the custom
port, if we use &lt;a class="reference external" href="https://circus.readthedocs.org/en/latest/"&gt;Circus&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;circus.watcher&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Watcher&lt;/span&gt;


&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'session'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app_script&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Start application in a separate process.&lt;/span&gt;

&lt;span class="sd"&gt;    :param port: a random port the application should listen to.&lt;/span&gt;
&lt;span class="sd"&gt;    :param app_script: the path to application runner script.&lt;/span&gt;

&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="n"&gt;watcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Watcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'application'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app_script&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'runserver {0}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;watcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addfinalizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;watcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;watcher&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a rather limited solution, because we did not set up the database
connection string. Furthermore, we couldn't pass it as an environment variable, nor
pass the path to the custom settings. It is however possible to pass parameters to
the script (app_script) in the example. This would help us to override the needed settings on the
&lt;strong&gt;remote&lt;/strong&gt; side. But then we should somehow marshal the complex data structures via the command line.
This would require more custom code to write.&lt;/p&gt;
&lt;p&gt;The first solution that came to mind was to use
&lt;a class="reference external" href="http://docs.python.org/2/library/multiprocessing.html#the-process-class"&gt;multiprocessing&lt;/a&gt;. This way we can use
a python function instead of a file script to be a worker for our application. Code would look as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;app_worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;database_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Start web application.&lt;/span&gt;

&lt;span class="sd"&gt;    :param str database_connection: the database connection string.&lt;/span&gt;
&lt;span class="sd"&gt;    :param port: the port number that will be used by runserver.&lt;/span&gt;

&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="c"&gt;# Remove modules that happen to be imported by the parent process.&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;builtin_module_names&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'multiprocessing'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c"&gt;# monkey patch the database connection&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;
    &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;database_connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;database_connection&lt;/span&gt;

    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tornado.httpserver&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tornado.ioloop&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tornado.web&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tornado.wsgi&lt;/span&gt;

    &lt;span class="n"&gt;wsgi_app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WSGIContainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;app_wsgi_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tornado_app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r"/media/(.*)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StaticFileHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;media_path&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FallbackHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wsgi_app&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;httpserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tornado_app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'started app on port: {0}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ioloop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IOLoop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'session'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;database_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Start application in a separate process.&lt;/span&gt;

&lt;span class="sd"&gt;    :param port: a random port the application should listen to.&lt;/span&gt;

&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;targer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app_worker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;database_connection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;database_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addfinalizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This has one big downside: memory. Multiprocessing uses &lt;a class="reference external" href="http://docs.python.org/2/library/os.html#os.fork"&gt;fork&lt;/a&gt; to
do its work. This means that a lot of memory you've earned in the parent process will be copied into the child process.
Of course it's declared to be copy-on-write but in reality python is not that efficient here.&lt;/p&gt;
&lt;p&gt;So we decided to combine these 2 approaches: use a subprocess to run python but don't bother with marshalling
the parameters manually via command line. The nice &lt;a class="reference external" href="http://codespeak.net/execnet"&gt;execnet&lt;/a&gt; library allows us to
transparently run some python function inside of a remote python process. Here is the comprehensive example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;execnet&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;app_worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;database_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Start web application.&lt;/span&gt;

&lt;span class="sd"&gt;    :param channel: execnet channel to talk to the master process.&lt;/span&gt;
&lt;span class="sd"&gt;    :param str database_connection: the database connection string.&lt;/span&gt;
&lt;span class="sd"&gt;    :param port: the port number that will be used by runserver.&lt;/span&gt;

&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="c"&gt;# monkey patch the database connection&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;
    &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;database_connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;database_connection&lt;/span&gt;

    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tornado.httpserver&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tornado.ioloop&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tornado.web&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tornado.wsgi&lt;/span&gt;

    &lt;span class="n"&gt;wsgi_app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WSGIContainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;app_wsgi_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tornado_app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r"/media/(.*)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StaticFileHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;media_path&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FallbackHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wsgi_app&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;httpserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tornado_app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'started app on port: {0}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ioloop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IOLoop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'session'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;database_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Start application in a separate process.&lt;/span&gt;

&lt;span class="sd"&gt;    :param port: a random port the application should listen to.&lt;/span&gt;

&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="c"&gt;# create execnet gateway&lt;/span&gt;
    &lt;span class="n"&gt;gw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;execnet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makegateway&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;# set the same python system path on remote python as on current one&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
    &lt;span class="n"&gt;gw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote_exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s"&gt;"import sys"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"sys.path = {0}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitclose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;# create channel running worker function&lt;/span&gt;
    &lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote_exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;app_worker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;database_connection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;database_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addfinalizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gw&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this way we can attach any customizations before starting the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-isolated-resources"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Other isolated resources&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Apart from the database connection string, there are other shared resources. One
of them can be some folder where file artifacts need to be stored. They have to be isolated as
well, because the filenames can clash in concurrent test processes (a.k.a. sessions).
However, mocking can be done here in the same way as in the case of the connection string.&lt;/p&gt;
&lt;p&gt;It is also possible to use only one server but with isolated databases. We then start as many MySQL
instances as we have concurrent test sessions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Requirements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another nontrivial part is to distribute requirements to each node. We do this
together with the code distribution as a virtualenv. Each node then activates
it before running the tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pytest_addoption&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Add options custom pytest options."""&lt;/span&gt;
    &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getgroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"xdist"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"distributed and subprocess32 testing"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_addoption&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;'--activate-script'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"store"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"activate_script"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'env/bin/activate_this.py'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Activate virtual environment script (relative path). "&lt;/span&gt;
        &lt;span class="s"&gt;"This is to make remote python aware about all the dependencies project needs."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pytest_configure_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Configure node information before it gets instantiated.&lt;/span&gt;

&lt;span class="sd"&gt;    Activate the virtual env, so the node is able to import Paylogic&lt;/span&gt;
&lt;span class="sd"&gt;    dependencies.&lt;/span&gt;

&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;activate_script&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activate_script&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;# remove pyc files and activate the virtual environment on the remote side.&lt;/span&gt;
    &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gateway&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote_exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s"&gt;"import os.path"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"import subprocess"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="sd"&gt;"""subprocess.check_call(['find', '-name', '"*.pyc"', '-delete'])"""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"activate_this = '{0}'"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activate_script&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s"&gt;"if os.path.exists(activate_this):"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"    execfile(activate_this, {'__file__': activate_this})"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitclose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Results&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Test parallelization dramatically reduced the time needed to run unit and
functional tests. It takes about 5 minutes to run unit and functional tests on a
cluster of 6 old dual core machines, each of them running 2 sessions.&lt;/p&gt;
&lt;p&gt;An experiment in the early stages gave these results:&lt;/p&gt;
&lt;img alt="parallelization performance comparison graph" class="align-center" src="http://developer.paylogic.com/images/p14n.png" style="width: 75%;"/&gt;
&lt;p&gt;The blue line is the test distribution over cluster machines, one worker on each
of them. The pink line represents the "ideal situation", where doubling the
number of works decreases the tests execution time by a factor of 2. Finally, the
yellow line is the run executed on a &lt;a class="reference external" href="http://www.asus.com/Notebooks_Ultrabooks/ASUS_ZENBOOK_UX32VD/#specifications"&gt;developer's machine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;py.test-xdist behaves very well when it comes to parallel execution and the
overhead is relatively small.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="open-source"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Open source&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We announce the open source pytest plugins which simplify the process of running services (memcached, mysql, etc)
on demand for every concurrent test session.  We also will open source a helper
for scheduling test jobs among test slave nodes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Automated testing facilitates development of complex software. However, if a
lot of time is required to get a test result, automated testing will be rejected
by the majority of the team. Test parallelization and execution over several nodes
solves this problem, with as trade-off the extra effort needed to make the tests ready for
parallelization.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="testing"></category><category term="parallelization"></category><category term="pytest"></category><category term="pytest-xdist"></category></entry><entry><title>Prefill Registration Data</title><link href="http://developer.paylogic.com/articles/prefill-registration.html" rel="alternate"></link><updated>2013-12-02T10:56:00+01:00</updated><author><name>Spyros Ioakeimidis</name></author><id>tag:developer.paylogic.com,2013-12-02:articles/prefill-registration.html</id><summary type="html">
&lt;p&gt;&lt;em&gt;Paylogic offers a feature to allow the prefilling of the personal data of a
consumer during the sales process via a personalized URL. This can be used
whenever a merchant already has the data of the consumers and wants to offer
these consumers a more personalized and smooth ticketing process, or when a
pre-registration step is used. The following sections describe the steps that
third parties have to implement in order to provide the possibility of
prefilling the registration form in the front office.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="json-data-format"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;JSON data format&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first step is to construct the data. The data should be structured using
JSON. The JSON data should adhere to the following format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"first_name"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Test Client First Name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"last_name"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Test Client Last Name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"test@testmail.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"gender"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"birth_date"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"1978-10-07"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"phone_number"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"0123456789"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"address"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Address 1A"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"postal_code"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"9999AB"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"city"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Groningen"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"country"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"NL"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;gender&lt;/code&gt; attribute should contain a code according to &lt;a class="reference external" href="http://en.wikipedia.org/wiki/ISO/IEC_5218"&gt;ISO 5218&lt;/a&gt;, which specifies the following
codes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;0 = not known&lt;/li&gt;
&lt;li&gt;1 = male&lt;/li&gt;
&lt;li&gt;2 = female&lt;/li&gt;
&lt;li&gt;9 = not applicable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The format of the &lt;code&gt;birth_date&lt;/code&gt; attribute should be &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
This format is according to &lt;a class="reference external" href="http://en.wikipedia.org/wiki/ISO_8601"&gt;ISO 8601&lt;/a&gt;.
Finally, the &lt;code&gt;country&lt;/code&gt; code attribute should contain a value according to
&lt;a class="reference external" href="http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm"&gt;ISO 3166&lt;/a&gt;.
For example, for The Netherlands the country code &lt;code&gt;NL&lt;/code&gt; should be used. It
should be mentioned that no certain format is required for &lt;code&gt;postal_code&lt;/code&gt;,
as long as its length is less than or equal to 12.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="compression-and-encoding"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Compression and Encoding&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The second step is to compress and encode the data. Compression helps to reduce
the length of the data, as the URL should contain up to a maximum number of
characters. It is not only that the JSON data itself might be long. Encoding
also increases the length of the data by approximately 33%.&lt;/p&gt;
&lt;p&gt;The pseudo code below illustrates the process of encoding and compression. It
also includes the creation of the JSON data. The data should first be compressed
and then encoded.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
create the JSON data

create a string out of the JSON data

compress the data using gzip compatible compression

encode the data using base64 and make them url safe
&lt;/pre&gt;
&lt;p&gt;The way encoding and compression can be implemented depends on which programming
language is used. A simple implementation is illustrated both for Python and
PHP. If there are any questions regarding the implementation, then please contact
the Paylogic support team.&lt;/p&gt;
&lt;div class="section" id="python"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Python&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The compression is done using the &lt;a class="reference external" href="http://www.zlib.net/"&gt;zlib&lt;/a&gt;
standard python module. The data is encoded to utf-8 prior to compression. Data
encoding is performed using base64 as specified in &lt;a class="reference external" href="http://tools.ietf.org/html/rfc3548.html"&gt;RFC 3548&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;zlib&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlsafe_b64encode&lt;/span&gt;

&lt;span class="c"&gt;# construct the json data&lt;/span&gt;
&lt;span class="n"&gt;json_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"first_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Test Client First Name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# create a string of the json data&lt;/span&gt;
&lt;span class="n"&gt;json_data_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# encode the data to utf8 and compress it&lt;/span&gt;
&lt;span class="n"&gt;compressed_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_data_string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'utf8'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;# encode the data using base64 and urlsafe&lt;/span&gt;
&lt;span class="n"&gt;encoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urlsafe_b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compressed_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="php"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;PHP&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The compression is done using the &lt;a class="reference external" href="http://php.net/manual/en/function.gzcompress.php"&gt;gzcompress&lt;/a&gt;
method, which uses the &lt;a class="reference external" href="http://www.zlib.net/"&gt;zlib&lt;/a&gt; data format. The data is
encoded to utf-8 prior to compression. Data encoding is performed using base64
as specified in &lt;a class="reference external" href="http://tools.ietf.org/html/rfc3548.html"&gt;RFC 3548&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;# create a string of the json data&lt;/span&gt;
&lt;span class="nv"&gt;$json_data_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'{"first_name": "Test Client First Name", ... }'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# encode data to utf8 and compress it&lt;/span&gt;
&lt;span class="nv"&gt;$compressed_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gzcompress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utf8_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$json_data_string&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;# encode the data using base64&lt;/span&gt;
&lt;span class="nv"&gt;$encoded_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;base64_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$compressed_data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;# make data urlsafe&lt;/span&gt;
&lt;span class="nv"&gt;$encoded_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'+'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'_'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;$encoded_data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="transferring-the-data"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Transferring the data&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The third step is to append the encoded and compressed data to the landing page
URL. The landing page URL is the URL that is usually included within the
invitation emails. The encoded and compressed data should be appended to the
landing page URL &lt;strong&gt;after&lt;/strong&gt; the fragment identifier (&lt;strong&gt;#&lt;/strong&gt;). The advantage of
this approach is that data after the fragment identifier is not sent over the
network and is only used client-side.&lt;/p&gt;
&lt;p&gt;The implementation of this is left to the third parties. The only constraint is
that the appended data should have a specific form. We assume that the landing
page URL contains some query parameters (substituted with '...' in the
following example for clarity) and &lt;code&gt;FGRAhdfhasAHDFA&lt;/code&gt; is the encoded and
compressed data. Then, a landing page URL with the appended data would have the
following form:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
http://tickets.company.com/?...#pld=FGRAhdfhasAHDFA
&lt;/pre&gt;
&lt;p&gt;It is important to use &lt;code&gt;pld&lt;/code&gt; as a parameter, as this is also used on the
side of Paylogic, when retrieving the data from the URL. The above method will
work if Paylogic handles the creation of the landing page.&lt;/p&gt;
&lt;div class="section" id="third-party-handles-landing-page"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Third party handles landing page&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In case a third party handles the creation of the landing page, then one more
step needs to be performed. The Javascript code below should be appended at the
end of the landing page HTML document. This ensures that the data is read from
the landing page URL and that it is appended in the queue URL, which resides as
an iframe inside the landing page HTML document.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;getHashParam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/([^#&amp;amp;]+)/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This is to ensure that if the variable contains '=' then they remain in the value.&lt;/span&gt;
    &lt;span class="c1"&gt;// for example: pld=FHadfsdhFJASDF3423==&lt;/span&gt;
    &lt;span class="c1"&gt;// In this case:&lt;/span&gt;
    &lt;span class="c1"&gt;//   key: pld&lt;/span&gt;
    &lt;span class="c1"&gt;//   value: FHadfsdhFJASDF3423==&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/=(.+)?/&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s2"&gt;"pld"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'paylogic-frontoffice'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'='&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;getHashParam&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="integration"></category></entry><entry><title>You are welcome</title><link href="http://developer.paylogic.com/articles/you-are-welcome.html" rel="alternate"></link><updated>2013-06-19T18:00:00+02:00</updated><author><name>Berco Beute</name></author><id>tag:developer.paylogic.com,2013-06-19:articles/you-are-welcome.html</id><summary type="html">
&lt;div class="section" id="you-are-welcome"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;You are welcome&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We at Paylogic are passionate about software. We have the craft of software engineering on a pedestal, we love to write clean code, we are interested in high availability, we are intrigued by distributed systems, we like to experiment with emerging technologies, we take pride in the applications we write, deploy and maintain. And we are fortunate enough to be able to live our passion through our jobs. Paylogic is a company that is both commercially and technically quite ambitious. Its goal is to redesign the world of ticketing with creative and reliable ticketing solutions which empower the event organizer in their relation with their visitors. The commercial ambitions are achieved through technical leadership. Technical leadership is achieved by both hiring top software engineers and selecting the right technologies and tools. One of the fundamental choices in that respect is the commitment to open source software. Paylogic is fully built upon open source software and firmly rooted in the open source culture. Some key technologies we use are for example Python, SQLAlchemy, Django, Flask, JavaScript and MySQL. Interestingly enough the Zen of Python is largely used as guidance for running the technical side of Paylogic. But we are not just using open source software, we are also actively giving back. We contribute to many open source projects, we run PyGrunn, the biggest Python conference in the Netherlands, we open source as much of the software we write as possible, we give lectures at universities about our work, and we participate in a number of open source related conferences. Somehow all of our open source efforts were quite detached and independent. This developer portal and blog should change that. This will be the central hub for the outside world to learn about the technology within Paylogic. We will announce open source projects and write about technical topics.&lt;/p&gt;
&lt;p&gt;In the end it is all about sharing, and we share because we care. We hope you appreciate our effort and share back. Whether it is code, ideas or feedback. So welcome to the tech world of Paylogic and please join the discussions!&lt;/p&gt;
&lt;/div&gt;
</summary><category term=""></category></entry><entry><title>Continuous Delivery</title><link href="http://developer.paylogic.com/articles/continuous-delivery.html" rel="alternate"></link><updated>2013-05-30T01:08:00+02:00</updated><author><name>Òscar Vilaplana</name></author><id>tag:developer.paylogic.com,2013-05-30:articles/continuous-delivery.html</id><summary type="html">
&lt;p&gt;&lt;em&gt;When you do Continuous Delivery you can deploy whenever you want: you
made it as easy as possible and you have become very good at it.
Everyone in the Engineering and Operations teams knows how to deploy
your application to any environment. Product can always see the latest
bells and whistles as they are built because you have Stable servers
running the latest versions of the application. You implement big
changes gradually and show them to the Product Team while keeping the
customer’s experience stable. When you decide to release, you have made
sure all things will work and you know how to react if nevertheless they
break, without fires or panic.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Continuous Deployment also forces you to do many right things:
repeatable builds; the exact same deployment process in all
environments, including the developer’s machines and a development
environment that is as close as possible to Production;
backwards-compatible database changes; easy rollbacks; code that is
split into components; good tests…&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="taming-the-software-lion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Taming the Software Lion&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="s"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;1800s&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It’s the 1800s. The lion is beaten into submission through fear, brute
force and confusion. That famous tamer wielding a chair—the lion is not
scared of the chair, it’s confused of it: why is this chair floating
here? And why is this guy holding it?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="modern-times"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Modern times&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nowadays tamers understand the lion’s psychology. They condition the
lion to behave as they want, they tie behaviors to signals and reward
the right behaviors. They build up trust.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="taming-the-software-lionrecap"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Taming the Software Lion—recap&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;1800s&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It’s the 1800s. Code is beaten into submission through iterations of
half-working attempts at hand-made deployments; with fear, because it
works and we barely understand it, so don’t touch it because &lt;em&gt;it works&lt;/em&gt;;
with weapons, because when it breaks it’s hacked some more until it
works (install a missing dependency, copy the forgotten templates…); and
with confusion: it’s difficult to see what’s actually installed, how,
what part of it is needed and what extra changes are needed to make it
work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Modern times&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nowadays software engineers understand that deploying software is hard,
and so they must get very good at it and automate it with clean
procedures so that it’s repeatable and debugable. They use continuous
integration, which rewards them with a green light when the build
passes. They take care of the health of the build. They deploy it
frequently to a staging server that the stakeholders can see. When
software breaks, they know how to act.&lt;/p&gt;
&lt;p&gt;Engineers build up trust: they can trust that the software works and
that it does what it’s supposed to do; and the stakeholders trust them
in that the product is built to their expectations.&lt;/p&gt;
&lt;div class="section" id="what-you-need-to-implement-continuous-delivery"&gt;
&lt;h4&gt;What You Need to implement Continuous Delivery&lt;/h4&gt;
&lt;p&gt;To implement Continuous Delivery, you need the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A team&lt;/li&gt;
&lt;li&gt;Working software&lt;/li&gt;
&lt;li&gt;A repeatable build&lt;/li&gt;
&lt;li&gt;An automated deployment&lt;/li&gt;
&lt;li&gt;A way to rollback&lt;/li&gt;
&lt;li&gt;An automated release&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="team"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Team&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Every single member of the Team must be committed to quality—process
can’t compensate for lack of commitment. This commitment includes the
constant learning of best practices and ways to improve.&lt;/p&gt;
&lt;p&gt;Everyone in the Team must know how to deploy and release software (also
in Live) and how to maintain the deployment and release scripts.
Everyone is responsible for these scripts: there cannot be a deployment
guru. For this, the deployment scripts must be clear, concise and
simple.&lt;/p&gt;
&lt;p&gt;All environments must be as similar as possible; this includes the
development machines. The Team must deploy the software in their
development machines using the exact same deployment and release scripts
that are used in Production and Staging.&lt;/p&gt;
&lt;p&gt;In addition to this, everyone in the Team is responsible for:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Having working Stable and Production environments.&lt;/li&gt;
&lt;li&gt;Having a green CI.&lt;/li&gt;
&lt;li&gt;Never committing broken code.&lt;/li&gt;
&lt;li&gt;Adding sufficient tests.&lt;/li&gt;
&lt;li&gt;Having good quality code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="working-software"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Working Software&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Software, even software that &lt;em&gt;works&lt;/em&gt;, is not working software unless it
has automated tests:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Unit Tests&lt;/li&gt;
&lt;li&gt;Functional Tests&lt;/li&gt;
&lt;li&gt;Acceptance Tests (testing from the user’s viewpoint, not from a lower
layer)&lt;/li&gt;
&lt;li&gt;Infrastructure and Configuration Tests (for example, testing that the
server must be able to send e-mail).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tests are not second-class citizens: the standards of their cleanness,
readability and maintainability must be as high as those of the rest of
the software. This quality must be maintained: tests must not be let rot
when changes accumulate.&lt;/p&gt;
&lt;p&gt;All these tests must be run locally before committing changes and also
automatically using Continuous Integration. Because tests are executed
often they should be kept fast.&lt;/p&gt;
&lt;p&gt;Simple mistakes, such as the ones that pylint catches, should be checked
even before running any tests.&lt;/p&gt;
&lt;p&gt;The build must be kept green at all times. Engineers should check in
their changes often, and be ready to rollback if the change (which
passed the local tests) breaks the build. Many small changes are
preferable to a single big change: they are easier to debug and to
rollback.&lt;/p&gt;
&lt;p&gt;Both Engineering and QA are responsible for the quality of the software
(this includes the tests).&lt;/p&gt;
&lt;p&gt;When a test breaks, it must be fixed. There are two possible moments for
fixing it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Right now. If the failure is legit, you must drop what you are doing
and fix the it.&lt;/li&gt;
&lt;li&gt;As soon as possible. If the failure is due to a false positive and
it’s not possible to fix it right now, the test must be fixed as soon
as possible. This should not be later than the end of the day.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If a test breaks because of changes that are being made, either the test
must be fixed right now or the changes must be reverted.&lt;/p&gt;
&lt;p&gt;Tests cannot be disabled to be fixed later. Later won’t come any time
soon.&lt;/p&gt;
&lt;p&gt;Any code must be peer-reviewed before being merged into the Stable
branch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="repeatable-build"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Repeatable Build&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The build must be automated, and used by all members of the Team in all
environments. The build process must contain no manual steps or changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="deployment-script"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Deployment Script&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As for the build, the deployment script must be automated and used by
all members of the Team in all environments. Deploying the software
should be accomplished by a single command:&lt;/p&gt;
&lt;blockquote&gt;
&lt;em&gt;./deploy.sh&lt;/em&gt; &amp;lt;environment&amp;gt; &amp;lt;version&amp;gt;&lt;/blockquote&gt;
&lt;p&gt;The only way to deploy is to follow the pipeline: tests, peer-review,
merge, test, automated build, automated deploy. This includes
emergencies: many problems come from skipping the pipeline and hacking a
solution out of urgency.&lt;/p&gt;
&lt;p&gt;If the pipeline is skipped and software is deployed by hand, the system
is left on an unknown state. If the hack fails it will be very difficult
to duplicate it and investigate what went wrong. Most of the time of
fixing a problem is usually spent in searching its cause.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rollback"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Rollback&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When a deployment fails it must be easy to rollback. There are many
strategies to accomplish this, for example Blue-Green Deployments and
Canary Deployments.&lt;/p&gt;
&lt;div class="section" id="blue-green-deployments"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;Blue-Green Deployments&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Have two separate environments: green is where the customers go when
they go to Production; blue is not.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Deploy the new version on blue.&lt;/li&gt;
&lt;li&gt;Test blue and do manual acceptance.&lt;/li&gt;
&lt;li&gt;Switch blue to green and green to blue: now Blue is serving
Production&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the deployment goes wrong, rolling back is a matter of switching
green and blue. It’s easy to investigate what went wrong because blue is
still running the new code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="canary-deployment"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;Canary Deployment&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Deploy the new version on a fraction of the servers and have it run
alongside the old version. Once it’s confirmed that it works as
expected, extend the deployment to the rest of the servers.&lt;/p&gt;
&lt;p&gt;This strategy can also be used to do A/B testing or assessing the
performance impact of new features.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="rollback-the-database"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;Rollback the Database&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For rollbacks to be possible, the database changes must be kept
backwards compatible. There is no way around this. When this is not
possible, make a plan on how to rollback.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automated-release"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;Automated Release&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When all the previous steps are in place, an automated release is just
the last step on the chain. While an automated release to Production may
not be desirable in all cases, an automated release to a Staging or
Integration environment will allow the stakeholders to use the latest
version of the software while it’s being developed and before it goes to
Production.&lt;/p&gt;
&lt;p&gt;Frequent, smaller changes are preferred to a big release: small releases
have shorter Time to Recover: if it goes wrong it will be easier to find
what went wrong if the amount of changes is small.&lt;/p&gt;
&lt;p&gt;Releasing is hard. If it hurts, do it more often.&lt;/p&gt;
&lt;div class="section" id="hidden-features"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;Hidden Features&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In some cases it is useful to release features but keep them
inaccessible or only accessible to a few users. There are several tools
to make this easy;
&lt;a class="reference external" href="https://github.com/disqus/gargoyle"&gt;gargoyle&lt;/a&gt;
is a popular one for Django.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tips"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;Tips&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="split-in-components"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;Split In Components&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Split your software in components that can be deployed independently.&lt;/p&gt;
&lt;p&gt;A component:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Is reusable&lt;/li&gt;
&lt;li&gt;Is replaceable with something else that implements the same API.&lt;/li&gt;
&lt;li&gt;Is independently deployable.&lt;/li&gt;
&lt;li&gt;Encapsulates a coherent set of behaviors and responsibilities of the
system.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Splitting your software in components encourages a clear delineation of
responsibilities and makes understanding and changing the code easier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rehearse-releases"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id21"&gt;Rehearse Releases&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Releasing is hard. Rehearse it and get very good at it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="manage-your-infrastructure"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id22"&gt;Manage your Infrastructure&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Write tests that verify that your infrastructure behaves as you expect
and provides the necessary functionality.&lt;/p&gt;
&lt;p&gt;Automate all infrastructure changes that can be automated, and document
the rest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="equal-environments"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id23"&gt;Equal Environments&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All environments must be as similar as possible. Use
&lt;a class="reference external" href="http://www.vagrantup.com/"&gt;vagrant&lt;/a&gt;
to develop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automate-everything"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id24"&gt;Automate Everything&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A process that is automated is repeatable and easier to debug. Automate
everything that can be automated.&lt;/p&gt;
&lt;hr class="docutils"/&gt;
&lt;p&gt;I gave a talk about this at DjangoCon Europe 2013. Here are the
&lt;a class="reference external" href="https://bitbucket.org/grimborg/continuousdeployment/src/tip/continuous-deployment.pdf"&gt;slides&lt;/a&gt;;
the video will be available soon.&lt;/p&gt;
&lt;p&gt;If this interests you, you may want to check these books:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912/ref=sr_1_1?ie=UTF8&amp;amp;qid=1369904950&amp;amp;sr=8-1"&gt;Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amazon.com/Continuous-Integration-Improving-Software-Reducing/dp/0321336380/ref=sr_1_1?ie=UTF8&amp;amp;qid=1369905064&amp;amp;sr=8-1"&gt;Continuous Integration: Improving Software Quality and Reducing Risk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amazon.com/Agile-Testing-Practical-Guide-Testers/dp/0321534468/ref=sr_1_1?ie=UTF8&amp;amp;qid=1369905098&amp;amp;sr=8-1"&gt;Agile Testing: A Practical Guide for Testers and Agile Team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1369905116&amp;amp;sr=1-1"&gt;Test Driven Development: By Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="agile"></category><category term="continuous delivery"></category><category term="deployment"></category><category term="release"></category><category term="testing"></category><category term="qa"></category></entry><entry><title>Using Debian packages for Python deployments</title><link href="http://developer.paylogic.com/articles/debian-packages.html" rel="alternate"></link><updated>2013-05-14T00:28:00+02:00</updated><author><name>Peter Odding</name></author><id>tag:developer.paylogic.com,2013-05-14:articles/debian-packages.html</id><summary type="html">
&lt;p&gt;At Paylogic we use Debian packages to deploy our Python applications. This
article explains how we got started.&lt;/p&gt;
&lt;p&gt;This is a large article but if you just want to get started building Debian
packages you can jump straight to the section on &lt;a class="reference internal" href="#getting-started-with-debian-packaging"&gt;getting started with Debian
packaging&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="disadvantages-of-python-packages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Disadvantages of Python packages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python has its own packaging infrastructure and there are a lot of people who
like it, but for us it doesn't come close to a full solution:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.python.org"&gt;PyPI&lt;/a&gt; and/or distribution websites go down regularly, usually at the exact
time you need them to perform a live deployment :-)&lt;/li&gt;
&lt;li&gt;Python packages cannot and therefore do not declare their binary dependencies,
because there is no portable way to do so (the packages names are different
in every Linux distribution, let alone other operating systems)&lt;/li&gt;
&lt;li&gt;Python packages don't control init.d scripts, cron tabs, configuration files,
etc. while we really do need to install and manage these files...&lt;/li&gt;
&lt;li&gt;What's with the whole &lt;a class="reference external" href="http://docs.python.org/2/library/distutils.html"&gt;Distutils&lt;/a&gt;, &lt;a class="reference external" href="https://pypi.python.org/pypi/setuptools"&gt;Setuptools&lt;/a&gt;, &lt;a class="reference external" href="https://pypi.python.org/pypi/distribute"&gt;Distribute&lt;/a&gt;, &lt;a class="reference external" href="https://pypi.python.org/pypi/Distutils2"&gt;Distutils2&lt;/a&gt; and
&lt;a class="reference external" href="https://pypi.python.org/pypi/distlib"&gt;Distlib&lt;/a&gt; confusion?! Please for the love of god just merge the common
subset, bless one tool and get this whole mess over with already! For more
details about this subject see &lt;a class="reference external" href="http://stackoverflow.com/questions/6344076/differences-between-distribute-distutils-setuptools-and-distutils2/14753678#14753678"&gt;Differences between distribute, distutils,
setuptools and distutils2?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="virtual-environments"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;Virtual environments&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There's one more significant thing, which is that Python packages favor virtual
environments over system wide installations. Why do we say this?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;easy_install&lt;/tt&gt; doesn't support removal of packages&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; does support removal of packages but does not support anything like
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt; autoremove&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of our problems with virtual environments is that we've seen them break in
various ways, for example because of security updates to the system-wide Python
installation (Google for &lt;a class="reference external" href="https://www.google.com/search?q=ImportError%3A%20cannot%20import%20name%20urandom"&gt;ImportError: cannot import name urandom&lt;/a&gt;). This is
one of the reasons why we prefer virtual machines over virtual environments to
isolate our production deployments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="making-sense-of-the-python-packaging-ecosystem"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Making sense of the Python packaging ecosystem&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As mentioned above the Python packaging ecosystem is a bit of a mess. For an
overview of the situation and some of the problems, refer to the following
external resources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://guide.python-distribute.org/introduction.html#current-state-of-packaging"&gt;The Hitchhiker's Guide to Packaging: Current State of Packaging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://lucumr.pocoo.org/2012/6/22/hate-hate-hate-everywhere/"&gt;Python Packaging: Hate, hate, hate everywhere&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.workaround.org/setuptools-versioning-wtf"&gt;setuptools versioning - wtf?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I sometimes hear people call Debian package management complex. They certainly
have a point, but as a DevOps who wants to do their work properly, Debian and
Python are both complex, the difference is that Debian is (mostly) a pleasure
to work with... The Python packaging ecosystem is very fragmented and
underdocumented while in Debian there is almost always a canonical, documented
way to do things properly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="advantages-of-debian-packages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Advantages of Debian packages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here are a couple of notable advantages of using Debian packages:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;They provide a controlled process for installing, removing, upgrading and
downgrading packages (for example for doing new releases, but also rolling
back existing releases)&lt;/li&gt;
&lt;li&gt;Dependencies on operating system packages are formalized as proper package
dependencies instead of being written down in wiki pages, personal notes, or
worse, not written down at all...&lt;/li&gt;
&lt;li&gt;The steps that should be executed in every environment where a package is
deployed are formalized in pre/post installation/removal scripts&lt;/li&gt;
&lt;li&gt;The packages are built on a dedicated host so production machines don't need
a build environment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's also the fact that we get to use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt;&lt;/tt&gt; more and we (generally)
love &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt;&lt;/tt&gt; :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;span id="getting-started-with-debian-packaging"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Getting started with Debian packaging&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Debian package management is a complex topic, however getting started requires
little upfront knowledge nor does it require a complex build environment. In
fact most of the tools you'll need are probably already installed if you're
running Debian or a derivative Linux distribution!&lt;/p&gt;
&lt;div class="section" id="creating-your-first-debian-package"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Creating your first Debian package&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To create a simple Debian package we only need a single file and a single
command. Here's how you get started:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Create a directory to hold the files contained in the package.&lt;/span&gt;
mkdir my-package &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;my-package

&lt;span class="c"&gt;# Create a directory with the package's control files.&lt;/span&gt;
mkdir DEBIAN

&lt;span class="c"&gt;# Create the main control file with package metadata.&lt;/span&gt;
cat &amp;gt; DEBIAN/control &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;Package: name-of-package&lt;/span&gt;
&lt;span class="s"&gt;Version: 1.0&lt;/span&gt;
&lt;span class="s"&gt;Section: universe/web&lt;/span&gt;
&lt;span class="s"&gt;Priority: optional&lt;/span&gt;
&lt;span class="s"&gt;Architecture: all&lt;/span&gt;
&lt;span class="s"&gt;Installed-Size: 1&lt;/span&gt;
&lt;span class="s"&gt;Maintainer: $USER&lt;/span&gt;
&lt;span class="s"&gt;Description: Explanation of why name-of-package is so cool&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

&lt;span class="c"&gt;# Build the package using the accepted naming scheme.&lt;/span&gt;
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;awk &lt;span class="s1"&gt;'/^Package:/ {print $2}'&lt;/span&gt; DEBIAN/control&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;awk &lt;span class="s1"&gt;'/^Version:/ {print $2}'&lt;/span&gt; DEBIAN/control&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;ARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;awk &lt;span class="s1"&gt;'/^Architecture:/ {print $2}'&lt;/span&gt; DEBIAN/control&lt;span class="k"&gt;)&lt;/span&gt;
dpkg-deb --build . &lt;span class="nv"&gt;$NAME_&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;_&lt;span class="nv"&gt;$ARCH&lt;/span&gt;.deb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assuming you're on a Debian/Ubuntu system, the above commands should be enough
to build a simple package. Any files in the working directory (excluding the
special &lt;tt class="docutils literal"&gt;DEBIAN&lt;/tt&gt; directory) will be included in the package as if the
directory containing the &lt;tt class="docutils literal"&gt;DEBIAN&lt;/tt&gt; package is the root of the file system.&lt;/p&gt;
&lt;p&gt;The resulting &lt;tt class="docutils literal"&gt;*.deb&lt;/tt&gt; file can be installed using &lt;tt class="docutils literal"&gt;dpkg &lt;span class="pre"&gt;-i&lt;/span&gt; $filename&lt;/tt&gt;,
however this won't automatically install dependencies, instead &lt;tt class="docutils literal"&gt;dpkg&lt;/tt&gt; will
error out when dependencies are missing... When this happens you can run
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt; install &lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/tt&gt; to install the dependencies. After that you can rerun
the &lt;tt class="docutils literal"&gt;dpkg&lt;/tt&gt; command; it should now succeed. Read on if you're interested in a
more streamlined experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-a-debian-package-repository"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Creating a Debian package repository&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As mentioned earlier &lt;tt class="docutils literal"&gt;dpkg&lt;/tt&gt; doesn't automatically pull in dependencies. If
you use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt;&lt;/tt&gt; it will do what you expect however &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt;&lt;/tt&gt; does not
support installation of local &lt;tt class="docutils literal"&gt;*.deb&lt;/tt&gt; archives; it needs a repository. In
other words, once you start using dependencies you will want to setup a Debian
package repository for your packages! Here's how you get started:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Create repository layout, copy packages.&lt;/span&gt;
mkdir -p repo/binary
cp *.deb repo/binary
&lt;span class="nb"&gt;cd &lt;/span&gt;repo

&lt;span class="c"&gt;# Create list of packages.&lt;/span&gt;
rm -f Packages Packages.gz Release Release.gpg  &lt;span class="c"&gt;# cleanup after previous run&lt;/span&gt;
dpkg-scanpackages -m . | sed &lt;span class="s1"&gt;'s@: \./@: @'&lt;/span&gt; &amp;gt; Packages

&lt;span class="c"&gt;# Create compressed copy of list.&lt;/span&gt;
cat Packages | gzip &amp;gt; Packages.gz

&lt;span class="c"&gt;# Generate release file.&lt;/span&gt;
rm -f Release Release.gpg  &lt;span class="c"&gt;# cleanup after previous run&lt;/span&gt;
&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; apt-ftparchive release . &amp;gt; Release.tmp
mv Release.tmp Release

&lt;span class="c"&gt;# Sign release file.&lt;/span&gt;
rm -f Release.gpg  &lt;span class="c"&gt;# cleanup after previous run&lt;/span&gt;
gpg -abs -o Release.gpg Release
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are several gotcha's in the above piece of shell script:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We cleanup generated files from previous runs because their presence
corrupts the generated files&lt;/li&gt;
&lt;li&gt;We modify the output of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;dpkg-scanpackages&lt;/span&gt;&lt;/tt&gt; to change for example
&lt;tt class="docutils literal"&gt;./test_1.0_all.deb&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;test_1.0_all.deb&lt;/tt&gt; (for some reason &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt;&lt;/tt&gt;
doesn't like &lt;tt class="docutils literal"&gt;Packages&lt;/tt&gt; files with leading &lt;tt class="docutils literal"&gt;./&lt;/tt&gt; fragments)&lt;/li&gt;
&lt;li&gt;We clear the &lt;tt class="docutils literal"&gt;$LANG&lt;/tt&gt; environment variable so that we are sure the
&lt;tt class="docutils literal"&gt;Release&lt;/tt&gt; file is properly formatted regardless of the value of &lt;tt class="docutils literal"&gt;$LANG&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;You need to have a private GPG key to sign the &lt;tt class="docutils literal"&gt;Release&lt;/tt&gt; file; if you don't
have one yet you'll need to create one using the command &lt;tt class="docutils literal"&gt;gpg &lt;span class="pre"&gt;--gen-key&lt;/span&gt;&lt;/tt&gt;
(you may find this &lt;a class="reference external" href="http://www.madboa.com/geek/gpg-quickstart/"&gt;GPG quick start&lt;/a&gt; useful)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="hosting-the-package-repository"&gt;
&lt;h4&gt;Hosting the package repository&lt;/h4&gt;
&lt;p&gt;After running the above commands, the directory &lt;cite&gt;repo/&lt;/cite&gt; can be served using a
regular web server (e.g. &lt;a class="reference external" href="http://httpd.apache.org/"&gt;Apache&lt;/a&gt; or &lt;a class="reference external" href="http://nginx.org/"&gt;Nginx&lt;/a&gt;). No specific configuration is
required because the repository contains only static files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-the-package-repository"&gt;
&lt;h4&gt;Using the package repository&lt;/h4&gt;
&lt;p&gt;The package repository can be registered in a Debian/Ubuntu system by creating
the file &lt;tt class="docutils literal"&gt;/etc/apt/sources.list.d/example.sources.list&lt;/tt&gt; with the following
contents:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
deb http://server-address ./
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-the-gpg-key"&gt;
&lt;h4&gt;Installing the GPG key&lt;/h4&gt;
&lt;p&gt;Before the package repository can be used from remote machines, the GPG key
used to sign the Release file has to be installed on the remote machines.
Assuming you have SSH and sudo access to the server where you generated the GPG
key &lt;cite&gt;and&lt;/cite&gt; the one where you want to install the GPG key, the following command
will install the GPG key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh build-server sudo -i gpg --armor --export | ssh target-host sudo apt-key add -
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="wrapping-up"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Wrapping up&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That's it really, at least to get started. Now consider how easy it is to write
some Python scripts that automatically build these packages for you based on
the contents of one or more version control systems and suddenly you're looking
at a viable deployment strategy!&lt;/p&gt;
&lt;p&gt;There are even people who build Python &lt;a class="reference external" href="http://www.virtualenv.org/en/latest/"&gt;virtual environments&lt;/a&gt; and ship those
in Debian packages. It may sound revolting at first, but give it a moment to
sink in; it has its advantages :-)&lt;/p&gt;
&lt;p&gt;In future articles we'll dive into more advanced topics like pre/post
installation/removal scripts, dpkg triggers and generation of configuration
files. Stay tuned!&lt;/p&gt;
&lt;!-- External references: --&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="deployment"></category><category term="automation"></category><category term="debian"></category><category term="packaging"></category></entry><entry><title>pip-accel: Accelerator for pip, the Python package manager</title><link href="http://developer.paylogic.com/articles/pip-accel.html" rel="alternate"></link><updated>2013-05-14T00:28:00+02:00</updated><author><name>Peter Odding</name></author><id>tag:developer.paylogic.com,2013-05-14:articles/pip-accel.html</id><summary type="html">
&lt;p&gt;Recently we published &lt;a class="reference external" href="https://github.com/paylogic/pip-accel"&gt;pip-accel&lt;/a&gt; to &lt;a class="reference external" href="https://github.com/paylogic/pip-accel"&gt;GitHub&lt;/a&gt; and &lt;a class="reference external" href="https://pypi.python.org/pypi/pip-accel"&gt;PyPI&lt;/a&gt;, in this article we'll
tell you why and how we created this project.&lt;/p&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The pip-accel program is a wrapper for &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt;, the Python package manager. It
accelerates the usage of pip to initialize Python &lt;a class="reference external" href="http://www.virtualenv.org/en/latest/"&gt;virtual environments&lt;/a&gt; given
one or more &lt;a class="reference external" href="http://www.pip-installer.org/en/latest/cookbook.html#requirements-files"&gt;requirements&lt;/a&gt; files. It does so by combining the following two
approaches:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Source distribution downloads are cached and used to generate a local index
of source distribution archives. If all your dependencies are pinned to
absolute versions whose source distribution downloads were previously
cached, pip-accel won't need a network connection at all! This is one of the
reasons why pip can be so slow: given absolute pinned dependencies available
in the download cache it will still scan PyPI (the online Python package
index) and distribution websites.&lt;/li&gt;
&lt;li&gt;Binary distributions are used to speed up the process of installing
dependencies with binary components (like M2Crypto and LXML). Instead of
recompiling these dependencies again for every virtual environment we
compile them once and cache the result as a binary &lt;tt class="docutils literal"&gt;*.tar.gz&lt;/tt&gt;
distribution.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the rest of this article we will discuss why pip-accel was created and dive
into the particulars of how it works. At the end we'll also look at some
related projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="at-paylogic-we-deploy-our-code-bases-a-lot"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;At Paylogic we deploy our code bases a lot&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Currently we have the following environments where we deploy our code bases:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Work laptops of the engineers and devops&lt;/li&gt;
&lt;li&gt;Continuous integration server with 10 slaves (we are using &lt;a class="reference external" href="http://jenkins-ci.org/"&gt;Jenkins&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Stable testing environment (continuously deployed)&lt;/li&gt;
&lt;li&gt;Staging testing environment (managed w/ releases)&lt;/li&gt;
&lt;li&gt;Production servers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In some of these environments (specifically in the continuous integration and
stable environments) new code bases can be deployed every few minutes when
engineers are publishing new changes or tested changes are being merged into
the main repository.&lt;/p&gt;
&lt;div class="section" id="python-deployment-strategies"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id3"&gt;Python deployment strategies&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For Python deployments there are two main ways to deploy a project and its dependencies:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;System-wide installation&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.virtualenv.org/en/latest/"&gt;Virtual environments&lt;/a&gt; (or an equivalent construction, isolated from the system)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At Paylogic we use system-wide installations on production (like) hosts and
virtual environments everywhere else. Why don't we use virtual environments on
production systems? Virtual environments do have some drawbacks (see below) and
we have the luxury of being able to isolate applications on the level of
virtual machines instead of Python virtual environments. This additional layer
of isolation is worth it for us.&lt;/p&gt;
&lt;div class="section" id="drawbacks-of-virtual-environments"&gt;
&lt;h4&gt;Drawbacks of virtual environments&lt;/h4&gt;
&lt;p&gt;Python virtual environments are by their nature a bit fragile. Quoting from
&lt;a class="reference external" href="http://virtualenv.org/en/latest/news.html"&gt;the virtualenv website&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Warning:&lt;/strong&gt; &lt;em&gt;Python bugfix releases 2.6.8, 2.7.3, 3.1.5 and 3.2.3 include
a change that will cause import random to fail with “cannot import name
urandom” on any virtualenv created on a Unix host with an earlier release
of Python 2.6/2.7/3.1/3.2, if the underlying system Python is upgraded.
This is due to the fact that a virtualenv uses the system Python’s standard
library but contains its own copy of the Python interpreter, so an upgrade
to the system Python results in a mismatch between the version of the
Python interpreter and the version of the standard library. It can be fixed
by removing $ENV/bin/python and re-running virtualenv on the same
target directory with the upgraded Python.&lt;/em&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="big-projects-have-a-lot-of-dependencies"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;Big projects have a lot of dependencies&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At Paylogic we create large virtual environments with &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt;: At the time of
writing our main code base has 84 dependencies if we include testing,
documentation and transitive dependencies (43 of those dependencies are required
in production). Some of these dependencies require SWIG and a compiler and for
large modules the compilation can take a while.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pip-can-be-slow-and-unreliable"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;pip can be slow and unreliable&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So we build a lot of virtual environments, which can be really slow. The actual
creation of the environment only takes a couple of seconds, but installing all
of the dependencies can take minutes! For example at the time of writing it
takes about seven minutes to install all dependencies of Paylogic's main code
base using &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What's worse is that PyPI and distribution websites can be very unreliable.
One day everything works fine, the next day the same packages you downloaded
previously can no longer be downloaded. Usually these are transient errors, you
just have to be very patient and/or retry until it works.&lt;/p&gt;
&lt;p&gt;We love virtual environments and pip so we don't necessarily need to replace
either of those, but it would be nice to solve these two problems.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="optimizing-pip"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Optimizing pip&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this section we'll discuss ways in which we can speed up pip.&lt;/p&gt;
&lt;div class="section" id="brute-force-caching"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Brute force caching&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If no requirements changed, we can re-use a previously built and cached virtual
environment. &lt;a class="reference external" href="https://pypi.python.org/pypi/terrarium"&gt;Terrarium&lt;/a&gt; takes this approach. There is a drawback however: If a
single dependency changes, we can't re-use the cache and have to rebuild
everything. This is not exactly ideal for continuous integration/deployment
environments (which is a big use case for us).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-what-about-a-more-granular-approach"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;So what about a more granular approach?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are two obvious targets:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Given absolute version numbers available in the download cache, &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt; still
goes out and scans PyPI and distribution websites. This is documented
behavior:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pip offers a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--download-cache&lt;/span&gt;&lt;/tt&gt; option for installs to prevent redundant
downloads of archives from PyPI. The point of this cache is not to
circumvent the index crawling process, but to just prevent redundant
downloads. Items are stored in this cache based on the url the archive
was found at, not simply the archive name. If you want a fast/local
install solution that circumvents crawling PyPI, see the &lt;a class="reference external" href="http://www.pip-installer.org/en/latest/cookbook.html#fast-local-installs"&gt;Fast &amp;amp; Local
Installs&lt;/a&gt; Cookbook entry.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Binary packages are recompiled for every virtual environment. This is
because historically &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt; did not support binary distributions (support for
the &lt;a class="reference external" href="http://wheel.readthedocs.org/en/latest/"&gt;Wheel&lt;/a&gt; format is now coming) so the only option was to go for source
packages, which require compilation. However there is of course no reason
why previous results can not be reused.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="keeping-pip-off-the-internet"&gt;
&lt;h4&gt;Keeping pip off the internet&lt;/h4&gt;
&lt;p&gt;Our first problem was that pip's index crawling process is very slow, so we
want to avoid it when possible. So how can we keep &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt; from always scanning
PyPI and distribution websites when all of the dependencies are already
available in the local download cache? Here's how:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;We generate a local source package index based on the &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt; download cache.
This local source package index is just a directory with source packages
downloaded from PyPI and distribution websites.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We then run &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt; as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install --no-index --find-links&lt;span class="o"&gt;=&lt;/span&gt;file://&lt;span class="nv"&gt;$LOCAL_INDEX&lt;/span&gt; --requirement&lt;span class="o"&gt;=&lt;/span&gt;example.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the command succeeds it means all of the requirements (including the
transitive dependencies) can be satisfied from the local index. In this case
we don't need a network connection!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="caching-compiled-packages"&gt;
&lt;h4&gt;Caching compiled packages&lt;/h4&gt;
&lt;p&gt;Our second problem was that &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt; always recompiles binary modules. This isn't
very hard to fix. Here's how you create a dumb binary distribution (a tar
archive with binary artifacts specific to your current system):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python setup.py bdist_dumb --format&lt;span class="o"&gt;=&lt;/span&gt;gztar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately these distributions are really dumb:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tar tf ipython-0.13.2.linux-x86_64.tar.gz | tail -n1
./home/peter/.virtualenvs/pip-accel/lib/python2.6/site-packages/IPython/lib/security.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dumb binary distributions contain hard coded pathnames specific to the virtual
environment we created them for! This is useless in any other context. Of
course with a bit of work these pathnames can be normalized to the root of the
(virtual) environment...&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="putting-it-all-together-pip-accel"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Putting it all together: pip-accel&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So now you know why and how &lt;a class="reference external" href="https://github.com/paylogic/pip-accel"&gt;pip-accel&lt;/a&gt; was born! It's available on &lt;a class="reference external" href="https://pypi.python.org/pypi/pip-accel"&gt;PyPI&lt;/a&gt; and
&lt;a class="reference external" href="https://github.com/paylogic/pip-accel"&gt;GitHub&lt;/a&gt; but if you just want to try it out you can use the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install pip-accel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The command &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pip-accel&lt;/span&gt;&lt;/tt&gt; will be installed in your environment. You should be
able to use it just like &lt;a class="reference external" href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt;, simply type &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pip-accel&lt;/span&gt;&lt;/tt&gt; where you would
previously type &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; on the command line (you can even alias it if you
like).&lt;/p&gt;
&lt;div class="section" id="how-fast-is-it"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;How fast is it?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To give you an idea of how effective &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pip-accel&lt;/span&gt;&lt;/tt&gt; is, below are the results of
a test to build a virtual environment for our main code base:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="13%"&gt;&lt;/col&gt;
&lt;col width="48%"&gt;&lt;/col&gt;
&lt;col width="16%"&gt;&lt;/col&gt;
&lt;col width="22%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Program&lt;/th&gt;
&lt;th class="head"&gt;Description&lt;/th&gt;
&lt;th class="head"&gt;Duration&lt;/th&gt;
&lt;th class="head"&gt;Percentage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;pip&lt;/td&gt;
&lt;td&gt;Default configuration&lt;/td&gt;
&lt;td&gt;444 seconds&lt;/td&gt;
&lt;td&gt;100% (baseline)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pip&lt;/td&gt;
&lt;td&gt;With download cache (first run)&lt;/td&gt;
&lt;td&gt;416 seconds&lt;/td&gt;
&lt;td&gt;94%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pip&lt;/td&gt;
&lt;td&gt;With download cache (second run)&lt;/td&gt;
&lt;td&gt;318 seconds&lt;/td&gt;
&lt;td&gt;72%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pip-accel&lt;/td&gt;
&lt;td&gt;First run&lt;/td&gt;
&lt;td&gt;397 seconds&lt;/td&gt;
&lt;td&gt;89%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pip-accel&lt;/td&gt;
&lt;td&gt;Second run&lt;/td&gt;
&lt;td&gt;30 seconds&lt;/td&gt;
&lt;td&gt;7%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We have some ideas on how to make this even faster :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-information"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;More information&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you're interested in more details about &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pip-accel&lt;/span&gt;&lt;/tt&gt;, the readme on GitHub
contains more information about the &lt;a class="reference external" href="https://github.com/paylogic/pip-accel#control-flow-of-pip-accel"&gt;internal control flow&lt;/a&gt;. You're also free
to browse the &lt;a class="reference external" href="https://github.com/paylogic/pip-accel/blob/master/pip_accel/__init__.py"&gt;source code&lt;/a&gt;; it's only a few hundred lines of well documented
Python code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="related-projects"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Related projects&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are a lot of projects that try to improve the Python deployment process
and it is definitely worth looking around to evaluate your options:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.python.org/pypi/terrarium"&gt;Terrarium&lt;/a&gt; generates and caches complete virtual environments, accomplishing
some of the same goals as &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pip-accel&lt;/span&gt;&lt;/tt&gt; but at a different granularity level&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.buildout.org/"&gt;Buildout&lt;/a&gt; is about reliable and repeatable deployments just like
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pip-accel&lt;/span&gt;&lt;/tt&gt; but it tackles non-Python applications as well, in effect
reproducing complete deployment environments&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference external" href="http://doc.devpi.net/"&gt;devpi project&lt;/a&gt; implements the server and client side of a Python
cheese shop (package index) with lots of additional features to support
Python package release, testing and installation activities&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- External references: --&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="deployment"></category><category term="virtual environments"></category><category term="automation"></category><category term="pip"></category><category term="open source"></category><category term="packaging"></category></entry></feed>